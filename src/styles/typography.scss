@use 'sass:math';
@import 'vars';

/// Check if two scss values are safe to add, subtract, or multiply.
/// @example scss Input
///  @if is-compatible($font-size, $line-height) {
///    @return math.div($line-height, $font-size);
///  } @else {
///    @return $line-height;
///  }
@function is-compatible($a, $b) {
  // Check if both values are numbers, for scss values like 3% or 10px count as numbers
  @if (type-of($a) == 'number' and type-of($b) == 'number') {
    // Check if they are unitless so we can do transformations
    @if (math.is-unitless($a) and math.is-unitless($b)) {
      // Extra check to make sure they are compatible for math.div later on
      @return math.compatible($a, $b);
    } @else {
      @return false;
    }
  } @else {
    @return false;
  }
}

// Use two pixel values to convert line-height into a unitless number
// @example scss Input
//   p {
//     font-size: 16px;
//     line-height: line-height(16, 30);
//   }
@function line-height($font-size, $line-height) {
  @if is-compatible($font-size, $line-height) {
    @return math.div($line-height, $font-size);
  } @else {
    @return $line-height;
  }
}

// Use two pixel values to convert letter-spacing into an em value
// @example scss Input
//   p {
//     font-size: 16px;
//     // letter-spacing: -0.1px;
//     letter-spacing: letter-spacing(16, -0.1);
//   }
@function letter-spacing($font-size, $letter-spacing) {
  @if is-compatible($font-size, $letter-spacing) {
    @return #{math.div($letter-spacing, $font-size)}em;
  } @else {
    @return $letter-spacing;
  }
}

// Define font-size, line-height and letter-spacing in function
// @example scss Input
//   p {
//     // font-size: 16px;
//     // letter-spacing: -0.1px;
//     // line-height: 1.5; // This is line-height 24px and font-size: 16px
//     @include font-size(16, 24, -0.1)
//   }
@mixin font-size($font-size, $line-height: null, $letter-spacing: null) {
  @if math.is-unitless($font-size) {
    font-size: px($font-size);
  } @else {
    font-size: $font-size;
  }

  line-height: line-height($font-size, $line-height);
  letter-spacing: letter-spacing($font-size, $letter-spacing);
}

/* prettier-ignore */
$typography-system: (
  mobile: (
    h1: (48, 10, 2),
    h2: (48, 56),
    paragraph: (16, 28),
  ),
  tablet: (
    h1: (90, 100),
  ),
  desktopSm: (
    h1: (140, 100),
  ),
  desktopMd: (
  ),
  desktopLg: (
  )
);

@mixin font-style($element) {
  $mobile: map-get($typography-system, mobile);
  $tablet: map-get($typography-system, tablet);
  $desktopSm: map-get($typography-system, desktopSm);
  $desktopMd: map-get($typography-system, desktopMd);
  $desktopLg: map-get($typography-system, desktopLg);

  @if (map-has-key($mobile, $element)) {
    @include font-size(map-get($mobile, $element)...);
  }

  @if (map-has-key($tablet, $element)) {
    @include breakpoint(tablet) {
      @include font-size(map-get($tablet, $element)...);
    }
  }

  @if (map-has-key($desktopSm, $element)) {
    @include breakpoint(desktopSm) {
      @include font-size(map-get($desktopSm, $element)...);
    }
  }

  @if (map-has-key($desktopMd, $element)) {
    @include breakpoint(desktopMd) {
      @include font-size(map-get($desktopMd, $element)...);
    }
  }

  @if (map-has-key($desktopLg, $element)) {
    @include breakpoint(desktopLg) {
      @include font-size(map-get($desktopLg, $element)...);
    }
  }
}
